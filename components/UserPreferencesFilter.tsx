"use client"

import { useState, useEffect } from "react"
import { Card, CardContent, CardHeader, CardTitle } from "@/components/ui/card"
import { Button } from "@/components/ui/button"
import { Badge } from "@/components/ui/badge"
import { Input } from "@/components/ui/input"
import { Label } from "@/components/ui/label"
import { Alert, AlertDescription } from "@/components/ui/alert"
import { 
  X, 
  Plus, 
  Search, 
  AlertTriangle, 
  CheckCircle2,
  Leaf,
  Utensils,
  ChefHat,
  Filter
} from "lucide-react"
import { useAuth } from "@/contexts/AuthContext"
import { toast } from "sonner"

interface UserPreferences {
  diet: string
  allergies: string[]
  dislikedIngredients: string[]
  dislikedDishes: string[]
  healthGoals: string[]
  budget: number
}

interface ConflictCheck {
  hasConflict: boolean
  conflicts: string[]
  suggestions: string[]
}

export function UserPreferencesFilter() {
  const { user, isAuthenticated } = useAuth()
  const [preferences, setPreferences] = useState<UserPreferences>({
    diet: "vegetarian",
    allergies: [],
    dislikedIngredients: [],
    dislikedDishes: [],
    healthGoals: [],
    budget: 1000000
  })
  const [newIngredient, setNewIngredient] = useState("")
  const [newDish, setNewDish] = useState("")
  const [searchIngredient, setSearchIngredient] = useState("")
  const [searchDish, setSearchDish] = useState("")
  const [conflictCheck, setConflictCheck] = useState<ConflictCheck | null>(null)
  const [loading, setLoading] = useState(false)

  // Common ingredients and dishes for suggestions
  const commonIngredients = [
    "th·ªãt b√≤", "th·ªãt heo", "th·ªãt g√†", "c√°", "t√¥m", "cua", "m·ª±c", "b·∫°ch tu·ªôc",
    "tr·ª©ng", "s·ªØa", "ph√¥ mai", "b∆°", "kem", "m·∫≠t ong", "ƒë∆∞·ªùng", "mu·ªëi",
    "h√†nh t√¢y", "t·ªèi", "·ªõt", "c√† chua", "khoai t√¢y", "c√† r·ªët", "b√≠ ƒë·ªè",
    "n·∫•m", "ƒë·∫≠u ph·ª•", "ƒë·∫≠u n√†nh", "ƒë·∫≠u xanh", "ƒë·∫≠u ƒë·ªè", "g·∫°o", "m√¨",
    "b√°nh m√¨", "b√∫n", "ph·ªü", "b√°nh canh", "h·ªß ti·∫øu", "m√¨ Qu·∫£ng"
  ]

  const commonDishes = [
    "b√∫n b√≤", "ph·ªü b√≤", "b√∫n ri√™u", "b√∫n ch·∫£", "b√∫n m·∫Øm", "b√∫n th·ªãt n∆∞·ªõng",
    "c∆°m t·∫•m", "c∆°m s∆∞·ªùn", "c∆°m g√†", "c∆°m c√°", "c∆°m t√¥m", "c∆°m th·ªãt kho",
    "b√°nh m√¨ th·ªãt", "b√°nh m√¨ pate", "b√°nh m√¨ ch·∫£ c√°", "b√°nh m√¨ x√≠u m·∫°i",
    "ch·∫£ c√°", "ch·∫£ l·ª•a", "ch·∫£ b√≤", "ch·∫£ heo", "nem n∆∞·ªõng", "th·ªãt n∆∞·ªõng",
    "canh chua", "canh kh·ªï qua", "canh b√≠ ƒë·ªè", "canh rau mu·ªëng",
    "g·ªèi cu·ªën", "g·ªèi ƒëu ƒë·ªß", "g·ªèi t√¥m th·ªãt", "g·ªèi b√≤ t√°i"
  ]

  useEffect(() => {
    if (isAuthenticated && user?.preferences) {
      setPreferences({
        diet: user.preferences.diet || "vegetarian",
        allergies: user.preferences.allergies || [],
        dislikedIngredients: user.preferences.dislikedIngredients || [],
        dislikedDishes: user.preferences.dislikedDishes || [],
        healthGoals: user.preferences.healthGoals || [],
        budget: user.preferences.budget || 1000000
      })
    }
  }, [isAuthenticated, user])

  useEffect(() => {
    checkConflicts()
  }, [preferences])

  const checkConflicts = () => {
    const conflicts: string[] = []
    const suggestions: string[] = []

    // Check diet conflicts
    if (preferences.diet === "vegetarian" || preferences.diet === "vegan") {
      const meatIngredients = preferences.dislikedIngredients.filter(ingredient => 
        ["th·ªãt b√≤", "th·ªãt heo", "th·ªãt g√†", "c√°", "t√¥m", "cua", "m·ª±c", "b·∫°ch tu·ªôc"].includes(ingredient)
      )
      
      if (meatIngredients.length > 0) {
        conflicts.push(`Ch·∫ø ƒë·ªô ƒÉn ${preferences.diet} kh√¥ng ph√π h·ª£p v·ªõi vi·ªác lo·∫°i b·ªè c√°c nguy√™n li·ªáu: ${meatIngredients.join(", ")}`)
        suggestions.push("C√°c nguy√™n li·ªáu n√†y ƒë√£ ƒë∆∞·ª£c lo·∫°i b·ªè t·ª± ƒë·ªông do ch·∫ø ƒë·ªô ƒÉn chay")
      }
    }

    // Check allergy conflicts
    const allergyConflicts = preferences.allergies.filter(allergy => 
      preferences.dislikedIngredients.includes(allergy)
    )
    
    if (allergyConflicts.length > 0) {
      conflicts.push(`C√°c nguy√™n li·ªáu d·ªã ·ª©ng ƒë√£ ƒë∆∞·ª£c th√™m v√†o danh s√°ch lo·∫°i b·ªè: ${allergyConflicts.join(", ")}`)
    }

    // Check health goals conflicts
    if (preferences.healthGoals.includes("gi·∫£m c√¢n") && preferences.dislikedIngredients.includes("ƒë∆∞·ªùng")) {
      suggestions.push("Lo·∫°i b·ªè ƒë∆∞·ªùng ph√π h·ª£p v·ªõi m·ª•c ti√™u gi·∫£m c√¢n")
    }

    if (preferences.healthGoals.includes("tƒÉng c∆°") && preferences.dislikedIngredients.includes("ƒë·∫≠u ph·ª•")) {
      conflicts.push("ƒê·∫≠u ph·ª• l√† ngu·ªìn protein t·ªët cho m·ª•c ti√™u tƒÉng c∆°")
      suggestions.push("N√™n c√¢n nh·∫Øc gi·ªØ l·∫°i ƒë·∫≠u ph·ª• trong ch·∫ø ƒë·ªô ƒÉn")
    }

    setConflictCheck({
      hasConflict: conflicts.length > 0,
      conflicts,
      suggestions
    })
  }

  const addDislikedIngredient = () => {
    if (newIngredient.trim() && !preferences.dislikedIngredients.includes(newIngredient.trim())) {
      setPreferences(prev => ({
        ...prev,
        dislikedIngredients: [...prev.dislikedIngredients, newIngredient.trim()]
      }))
      setNewIngredient("")
      toast.success(`ƒê√£ th√™m "${newIngredient.trim()}" v√†o danh s√°ch lo·∫°i b·ªè`)
    }
  }

  const addDislikedDish = () => {
    if (newDish.trim() && !preferences.dislikedDishes.includes(newDish.trim())) {
      setPreferences(prev => ({
        ...prev,
        dislikedDishes: [...prev.dislikedDishes, newDish.trim()]
      }))
      setNewDish("")
      toast.success(`ƒê√£ th√™m "${newDish.trim()}" v√†o danh s√°ch lo·∫°i b·ªè`)
    }
  }

  const removeDislikedIngredient = (ingredient: string) => {
    setPreferences(prev => ({
      ...prev,
      dislikedIngredients: prev.dislikedIngredients.filter(item => item !== ingredient)
    }))
    toast.success(`ƒê√£ x√≥a "${ingredient}" kh·ªèi danh s√°ch lo·∫°i b·ªè`)
  }

  const removeDislikedDish = (dish: string) => {
    setPreferences(prev => ({
      ...prev,
      dislikedDishes: prev.dislikedDishes.filter(item => item !== dish)
    }))
    toast.success(`ƒê√£ x√≥a "${dish}" kh·ªèi danh s√°ch lo·∫°i b·ªè`)
  }

  const savePreferences = async () => {
    try {
      setLoading(true)
      const response = await fetch('/api/user/preferences', {
        method: 'POST',
        headers: {
          'Content-Type': 'application/json',
        },
        body: JSON.stringify(preferences),
      })

      if (response.ok) {
        toast.success("ƒê√£ l∆∞u t√πy ch·ªçn l·ªçc th√†nh c√¥ng!")
        // Update user context
        if (user) {
          user.preferences = { ...user.preferences, ...preferences }
        }
      } else {
        throw new Error('Failed to save preferences')
      }
    } catch (error) {
      console.error('Error saving preferences:', error)
      toast.error("L·ªói khi l∆∞u t√πy ch·ªçn l·ªçc")
    } finally {
      setLoading(false)
    }
  }

  const filteredIngredients = commonIngredients.filter(ingredient =>
    ingredient.toLowerCase().includes(searchIngredient.toLowerCase()) &&
    !preferences.dislikedIngredients.includes(ingredient)
  )

  const filteredDishes = commonDishes.filter(dish =>
    dish.toLowerCase().includes(searchDish.toLowerCase()) &&
    !preferences.dislikedDishes.includes(dish)
  )

  if (!isAuthenticated) {
    return (
      <Card className="w-full">
        <CardHeader>
          <CardTitle className="flex items-center gap-2">
            <Filter className="h-5 w-5" />
            T√πy ch·ªçn l·ªçc
          </CardTitle>
        </CardHeader>
        <CardContent>
          <div className="text-center py-8">
            <ChefHat className="h-12 w-12 text-muted-foreground mx-auto mb-4" />
            <h3 className="text-lg font-semibold mb-2">C·∫ßn ƒëƒÉng nh·∫≠p</h3>
            <p className="text-muted-foreground mb-4">
              Vui l√≤ng ƒëƒÉng nh·∫≠p ƒë·ªÉ s·ª≠ d·ª•ng t√≠nh nƒÉng l·ªçc nguy√™n li·ªáu v√† m√≥n ƒÉn
            </p>
          </div>
        </CardContent>
      </Card>
    )
  }

  return (
    <div className="space-y-6">
      {/* Conflict Check Alert */}
      {conflictCheck && (conflictCheck.hasConflict || conflictCheck.suggestions.length > 0) && (
        <Alert className={conflictCheck.hasConflict ? "border-orange-200 bg-orange-50" : "border-blue-200 bg-blue-50"}>
          <AlertTriangle className="h-4 w-4" />
          <AlertDescription>
            <div className="space-y-2">
              {conflictCheck.conflicts.map((conflict, index) => (
                <div key={index} className="text-orange-800">
                  ‚ö†Ô∏è {conflict}
                </div>
              ))}
              {conflictCheck.suggestions.map((suggestion, index) => (
                <div key={index} className="text-blue-800">
                  üí° {suggestion}
                </div>
              ))}
            </div>
          </AlertDescription>
        </Alert>
      )}

      {/* Disliked Ingredients */}
      <Card>
        <CardHeader>
          <CardTitle className="flex items-center gap-2">
            <Utensils className="h-5 w-5" />
            Nguy√™n li·ªáu kh√¥ng mong mu·ªën
          </CardTitle>
        </CardHeader>
        <CardContent className="space-y-4">
          {/* Add new ingredient */}
          <div className="flex gap-2">
            <Input
              placeholder="Nh·∫≠p nguy√™n li·ªáu mu·ªën lo·∫°i b·ªè..."
              value={newIngredient}
              onChange={(e) => setNewIngredient(e.target.value)}
              onKeyPress={(e) => e.key === 'Enter' && addDislikedIngredient()}
            />
            <Button onClick={addDislikedIngredient} disabled={!newIngredient.trim()}>
              <Plus className="h-4 w-4" />
            </Button>
          </div>

          {/* Search suggestions */}
          <div className="space-y-2">
            <Label className="text-sm font-medium">G·ª£i √Ω nguy√™n li·ªáu ph·ªï bi·∫øn:</Label>
            <div className="relative">
              <Search className="absolute left-3 top-1/2 -translate-y-1/2 h-4 w-4 text-muted-foreground" />
              <Input
                placeholder="T√¨m ki·∫øm nguy√™n li·ªáu..."
                className="pl-10"
                value={searchIngredient}
                onChange={(e) => setSearchIngredient(e.target.value)}
              />
            </div>
            <div className="flex flex-wrap gap-2 max-h-32 overflow-y-auto">
              {filteredIngredients.slice(0, 10).map((ingredient) => (
                <Button
                  key={ingredient}
                  variant="outline"
                  size="sm"
                  onClick={() => {
                    setNewIngredient(ingredient)
                    addDislikedIngredient()
                  }}
                  className="text-xs"
                >
                  <Plus className="h-3 w-3 mr-1" />
                  {ingredient}
                </Button>
              ))}
            </div>
          </div>

          {/* Current disliked ingredients */}
          <div className="space-y-2">
            <Label className="text-sm font-medium">
              ƒê√£ lo·∫°i b·ªè ({preferences.dislikedIngredients.length}):
            </Label>
            <div className="flex flex-wrap gap-2">
              {preferences.dislikedIngredients.map((ingredient) => (
                <Badge key={ingredient} variant="destructive" className="gap-1">
                  {ingredient}
                  <button
                    onClick={() => removeDislikedIngredient(ingredient)}
                    className="ml-1 hover:bg-red-600 rounded-full p-0.5"
                  >
                    <X className="h-3 w-3" />
                  </button>
                </Badge>
              ))}
            </div>
          </div>
        </CardContent>
      </Card>

      {/* Disliked Dishes */}
      <Card>
        <CardHeader>
          <CardTitle className="flex items-center gap-2">
            <ChefHat className="h-5 w-5" />
            M√≥n ƒÉn kh√¥ng mong mu·ªën
          </CardTitle>
        </CardHeader>
        <CardContent className="space-y-4">
          {/* Add new dish */}
          <div className="flex gap-2">
            <Input
              placeholder="Nh·∫≠p m√≥n ƒÉn mu·ªën lo·∫°i b·ªè..."
              value={newDish}
              onChange={(e) => setNewDish(e.target.value)}
              onKeyPress={(e) => e.key === 'Enter' && addDislikedDish()}
            />
            <Button onClick={addDislikedDish} disabled={!newDish.trim()}>
              <Plus className="h-4 w-4" />
            </Button>
          </div>

          {/* Search suggestions */}
          <div className="space-y-2">
            <Label className="text-sm font-medium">G·ª£i √Ω m√≥n ƒÉn ph·ªï bi·∫øn:</Label>
            <div className="relative">
              <Search className="absolute left-3 top-1/2 -translate-y-1/2 h-4 w-4 text-muted-foreground" />
              <Input
                placeholder="T√¨m ki·∫øm m√≥n ƒÉn..."
                className="pl-10"
                value={searchDish}
                onChange={(e) => setSearchDish(e.target.value)}
              />
            </div>
            <div className="flex flex-wrap gap-2 max-h-32 overflow-y-auto">
              {filteredDishes.slice(0, 10).map((dish) => (
                <Button
                  key={dish}
                  variant="outline"
                  size="sm"
                  onClick={() => {
                    setNewDish(dish)
                    addDislikedDish()
                  }}
                  className="text-xs"
                >
                  <Plus className="h-3 w-3 mr-1" />
                  {dish}
                </Button>
              ))}
            </div>
          </div>

          {/* Current disliked dishes */}
          <div className="space-y-2">
            <Label className="text-sm font-medium">
              ƒê√£ lo·∫°i b·ªè ({preferences.dislikedDishes.length}):
            </Label>
            <div className="flex flex-wrap gap-2">
              {preferences.dislikedDishes.map((dish) => (
                <Badge key={dish} variant="destructive" className="gap-1">
                  {dish}
                  <button
                    onClick={() => removeDislikedDish(dish)}
                    className="ml-1 hover:bg-red-600 rounded-full p-0.5"
                  >
                    <X className="h-3 w-3" />
                  </button>
                </Badge>
              ))}
            </div>
          </div>
        </CardContent>
      </Card>

      {/* Save Button */}
      <div className="flex justify-end">
        <Button onClick={savePreferences} disabled={loading} className="gap-2">
          {loading ? (
            <div className="animate-spin rounded-full h-4 w-4 border-b-2 border-white"></div>
          ) : (
            <CheckCircle2 className="h-4 w-4" />
          )}
          L∆∞u t√πy ch·ªçn l·ªçc
        </Button>
      </div>
    </div>
  )
}
